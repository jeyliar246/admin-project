-- Create users table
create table public.users (
    id uuid default auth.uid() primary key,
    email text unique,
    status text check (status in ('active', 'inactive', 'suspended')) default 'active',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create vendors table
create table public.vendors (
    id bigint generated by default as identity primary key,
    name text not null,
    email text unique not null,
    phone text,
    address text,
    business_type text not null,
    status text check (status in ('active', 'inactive', 'pending')) default 'pending',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create instant_deliveries table
create table public.instant_deliveries (
    id bigint generated by default as identity primary key,
    user_id uuid references public.users(id),
    vendor_id bigint references public.vendors(id),
    status text check (status in ('pending', 'in_transit', 'completed', 'cancelled')) default 'pending',
    pickup_location text not null,
    delivery_location text not null,
    description text,
    estimated_time interval,
    priority text check (priority in ('normal', 'high', 'urgent')) default 'normal',
    completed_at timestamp with time zone,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    FOREIGN KEY (vendor_id) REFERENCES public.vendors(id)
);

-- Create deliveries table
create table public.deliveries (
    id bigint generated by default as identity primary key,
    user_id uuid references public.users(id),
    vendor_id bigint references public.vendors(id),
    status text check (status in ('pending', 'in_transit', 'completed', 'cancelled')) default 'pending',
    location text not null,
    description text,
    completed_at timestamp with time zone,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create payments table
create table public.payments (
    id bigint generated by default as identity primary key,
    delivery_id bigint references public.deliveries(id),
    amount decimal(10,2) not null,
    status text check (status in ('pending', 'completed', 'failed')) default 'pending',
    payment_method text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create RLS policies
alter table public.users enable row level security;
alter table public.vendors enable row level security;
alter table public.deliveries enable row level security;
alter table public.instant_deliveries enable row level security;
alter table public.payments enable row level security;

-- Users policies
create policy "Users can view their own data" on public.users
    for select using (auth.uid() = id);

-- Vendors policies
create policy "Anyone can view vendors" on public.vendors
    for select using (true);

create policy "Authenticated users can create vendors" on public.vendors
    for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update vendors" on public.vendors
    for update using (auth.role() = 'authenticated');

-- Deliveries policies
create policy "Users can view their own deliveries" on public.deliveries
    for select using (auth.uid() = user_id);

create policy "Users can create their own deliveries" on public.deliveries
    for insert with check (auth.uid() = user_id);

-- Instant Deliveries policies
create policy "Users can view their own instant deliveries" on public.instant_deliveries
    for select using (auth.uid() = user_id);

create policy "Users can create their own instant deliveries" on public.instant_deliveries
    for insert with check (auth.uid() = user_id);

-- Payments policies
create policy "Users can view their own payments" on public.payments
    for select using (
        auth.uid() in (
            select user_id from public.deliveries where id = delivery_id
        )
    );

-- Create indexes
create index idx_users_status on public.users(status);
create index idx_vendors_status on public.vendors(status);
create index idx_vendors_business_type on public.vendors(business_type);
create index idx_deliveries_status on public.deliveries(status);
create index idx_deliveries_completed_at on public.deliveries(completed_at);
create index idx_instant_deliveries_status on public.instant_deliveries(status);
create index idx_instant_deliveries_priority on public.instant_deliveries(priority);
create index idx_payments_status on public.payments(status); 